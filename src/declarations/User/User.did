type User__1 = 
 record {
   dob: text;
   firstName: text;
   lastName: text;
   userEmail: text;
 };
type UserInfo = 
 record {
   createdAt: text;
   dob: text;
   firstName: text;
   hostStatus: bool;
   lastName: text;
   userEmail: text;
   userGovId: text;
   userProfile: text;
   userType: text;
   verificationStatus: bool;
 };
type User = 
 service {
   createUser: (User__1) -> ();
   getOwner: () -> (text) query;
   getPK: () -> (text) query;
   getUserInfo: () -> (opt UserInfo) query;
   scanUsers: (text, text, nat, opt bool) -> (ScanUser) query;
   skExists: (text) -> (bool) query;
   transferCycles: () -> ();
   updateUserInfo: (UserInfo) -> (opt UserInfo);
 };
type ScanUser = 
 record {
   nextKey: opt text;
   users: vec UserInfo;
 };
type ScalingOptions = 
 record {
   autoScalingHook: AutoScalingCanisterSharedFunctionHook;
   sizeLimit: ScalingLimitType;
 };
type ScalingLimitType = 
 variant {
   count: nat;
   heapSize: nat;
 };
type AutoScalingCanisterSharedFunctionHook = func (text) -> (text);
service : (record {
             owners: opt vec principal;
             partitonKey: text;
             scalingOptions: ScalingOptions;
           }) -> User
